import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// Create an API using createApi
export const api = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: process.env.REACT_APP_BASE_URL }), // Configure the base URL for all requests
  reducerPath: "adminApi", // Define the slice name for the reducer that will be created
  tagTypes: [
    // Define tag types for caching
    "counter",
    "dndClasses",
    "dndAlignments",
    "dndRaces",
    "dndSubRaces",
    "dndMonsters",
    "dndMonsterData",
    "dndEquipments",
    "dndEquipmentData",
    "imageGen256",
    "imageGen512",
    "imageGen1024",
  ],
  endpoints: (build) => ({
    // Define various query and mutation endpoints
    getCount: build.query({
      query: () => ({
        url: `user/count`,
        method: "GET",
      }),
      providesTags: ["counter"], // Specify tags for caching
    }),
    getClasses: build.query({
      query: () => ({
        url: `dnd/classes`,
        method: "GET",
      }),
      providesTags: ["dndClasses"],
    }),
    getAlignments: build.query({
      query: () => ({
        url: `dnd/alignments`,
        method: "GET",
      }),
      providesTags: ["dndAlignments"],
    }),
    getRaces: build.query({
      query: () => ({
        url: `dnd/races`,
        method: "GET",
      }),
      providesTags: ["dndRaces"],
    }),
    getSubRaces: build.query({
      query: () => ({
        url: `dnd/subraces`,
        method: "GET",
      }),
      providesTags: ["dndSubRaces"],
    }),
    getMonsters: build.query({
      query: () => ({
        url: `dnd/monsters`,
        method: "GET",
      }),
      providesTags: ["dndMonsters"],
    }),
    getMonsterData: build.query({
      query: ({ name }) => ({
        url: `dnd/monsterdata`,
        method: "GET",
        params: { name },
      }),
      providesTags: ["dndMonsterData"],
    }),
    getEquipments: build.query({
      query: () => ({
        url: `dnd/equipments`,
        method: "GET",
      }),
      providesTags: ["dndEquipments"],
    }),
    getEquipmentData: build.query({
      query: ({ name }) => ({
        url: `dnd/equipmentdata`,
        method: "GET",
        params: { name },
      }),
      providesTags: ["dndEquipmentData"],
    }),
    generateImage256: build.mutation({
      query: (prompt) => ({
        url: `image/256`,
        method: "POST",
        body: { prompt: prompt },
      }),
      invalidatesTags: ["imageGen256"],
    }),
    generateImage512: build.mutation({
      query: (prompt) => ({
        url: `image/512`,
        method: "POST",
        body: { prompt: prompt },
      }),
      invalidatesTags: ["imageGen512"],
    }),
    generateImage1024: build.mutation({
      query: (prompt) => ({
        url: `image/1024`,
        method: "POST",
        body: { prompt: prompt },
      }),
      invalidatesTags: ["imageGen1024"],
    }),
  }),
});

// Export query and mutation hooks generated by createApi
export const {
  useGetCountQuery,
  useGetClassesQuery,
  useGetAlignmentsQuery,
  useGetRacesQuery,
  useGetSubRacesQuery,
  useGetMonstersQuery,
  useGetMonsterDataQuery,
  useGetEquipmentsQuery,
  useGetEquipmentDataQuery,
  useGenerateImage256Mutation,
  useGenerateImage512Mutation,
  useGenerateImage1024Mutation,
} = api;
